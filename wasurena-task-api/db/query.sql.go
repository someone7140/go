// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"time"

	db_type "wasurena-task-api/db/type"
)

const createTaskCategory = `-- name: CreateTaskCategory :one
insert
	into
	task_category (
    id,
	name,
	owner_user_id,
	display_order
)
values (
    $1, 
    $2, 
    $3, 
    $4
) returning id, name, owner_user_id, display_order
`

type CreateTaskCategoryParams struct {
	ID           string
	Name         string
	OwnerUserID  string
	DisplayOrder *int32
}

func (q *Queries) CreateTaskCategory(ctx context.Context, arg CreateTaskCategoryParams) (TaskCategory, error) {
	row := q.db.QueryRow(ctx, createTaskCategory,
		arg.ID,
		arg.Name,
		arg.OwnerUserID,
		arg.DisplayOrder,
	)
	var i TaskCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerUserID,
		&i.DisplayOrder,
	)
	return i, err
}

const createTaskDefinition = `-- name: CreateTaskDefinition :one
insert
	into
	task_definition (
    id,
	title,
	owner_user_id,
	display_flag,
	notification_flag,
	dead_line_check,
	dead_line_check_sub_setting,
	category_id,
	detail
)
values (
    $1, 
    $2, 
    $3, 
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) returning id, title, owner_user_id, display_flag, notification_flag, category_id, dead_line_check, dead_line_check_sub_setting, detail
`

type CreateTaskDefinitionParams struct {
	ID                      string
	Title                   string
	OwnerUserID             string
	DisplayFlag             bool
	NotificationFlag        bool
	DeadLineCheck           *DeadLineCheckEnum
	DeadLineCheckSubSetting db_type.Jsonb
	CategoryID              *string
	Detail                  *string
}

func (q *Queries) CreateTaskDefinition(ctx context.Context, arg CreateTaskDefinitionParams) (TaskDefinition, error) {
	row := q.db.QueryRow(ctx, createTaskDefinition,
		arg.ID,
		arg.Title,
		arg.OwnerUserID,
		arg.DisplayFlag,
		arg.NotificationFlag,
		arg.DeadLineCheck,
		arg.DeadLineCheckSubSetting,
		arg.CategoryID,
		arg.Detail,
	)
	var i TaskDefinition
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.OwnerUserID,
		&i.DisplayFlag,
		&i.NotificationFlag,
		&i.CategoryID,
		&i.DeadLineCheck,
		&i.DeadLineCheckSubSetting,
		&i.Detail,
	)
	return i, err
}

const createTaskExecute = `-- name: CreateTaskExecute :one
insert
	into
	task_execute (
    id,
	task_definition_id,
	execute_user_id,
	execute_date_time,
	memo
)
values (
    $1, 
    $2, 
    $3, 
    $4,
    $5
) returning id, task_definition_id, execute_user_id, execute_date_time, memo
`

type CreateTaskExecuteParams struct {
	ID               string
	TaskDefinitionID string
	ExecuteUserID    string
	ExecuteDateTime  time.Time
	Memo             *string
}

func (q *Queries) CreateTaskExecute(ctx context.Context, arg CreateTaskExecuteParams) (TaskExecute, error) {
	row := q.db.QueryRow(ctx, createTaskExecute,
		arg.ID,
		arg.TaskDefinitionID,
		arg.ExecuteUserID,
		arg.ExecuteDateTime,
		arg.Memo,
	)
	var i TaskExecute
	err := row.Scan(
		&i.ID,
		&i.TaskDefinitionID,
		&i.ExecuteUserID,
		&i.ExecuteDateTime,
		&i.Memo,
	)
	return i, err
}

const createUserAccount = `-- name: CreateUserAccount :one
insert
	into
	user_accounts (
    id,
	user_setting_id,
	line_id,
	user_name,
	image_url
)
values (
    $1, 
    $2, 
    $3, 
    $4,
    $5
) returning id, user_setting_id, line_id, user_name, image_url, is_line_bot_follow
`

type CreateUserAccountParams struct {
	ID            string
	UserSettingID string
	LineID        string
	UserName      string
	ImageUrl      *string
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRow(ctx, createUserAccount,
		arg.ID,
		arg.UserSettingID,
		arg.LineID,
		arg.UserName,
		arg.ImageUrl,
	)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.UserSettingID,
		&i.LineID,
		&i.UserName,
		&i.ImageUrl,
		&i.IsLineBotFollow,
	)
	return i, err
}

const selectLatestTaskExecuteForNotify = `-- name: SelectLatestTaskExecuteForNotify :many
select
	def.id, def.title, def.owner_user_id, def.display_flag, def.notification_flag, def.category_id, def.dead_line_check, def.dead_line_check_sub_setting, def.detail,
	(case
		when exec.execute_date_time is null then '1999-12-31 15:00:00+00'::timestamptz
		else exec.execute_date_time::timestamptz
	end) as latest_date_time
from
		task_definition def
left outer join 
	(
	select
			task_definition_id,
			max(execute_date_time) as execute_date_time
	from
			task_execute
	group by
			task_definition_id) exec on
		def.id = exec.task_definition_id
where
		def.notification_flag = true
	and def.dead_line_check is not null
order by
		owner_user_id,
		id
`

type SelectLatestTaskExecuteForNotifyRow struct {
	ID                      string
	Title                   string
	OwnerUserID             string
	DisplayFlag             bool
	NotificationFlag        bool
	CategoryID              *string
	DeadLineCheck           *DeadLineCheckEnum
	DeadLineCheckSubSetting db_type.Jsonb
	Detail                  *string
	LatestDateTime          time.Time
}

func (q *Queries) SelectLatestTaskExecuteForNotify(ctx context.Context) ([]SelectLatestTaskExecuteForNotifyRow, error) {
	rows, err := q.db.Query(ctx, selectLatestTaskExecuteForNotify)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectLatestTaskExecuteForNotifyRow
	for rows.Next() {
		var i SelectLatestTaskExecuteForNotifyRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.OwnerUserID,
			&i.DisplayFlag,
			&i.NotificationFlag,
			&i.CategoryID,
			&i.DeadLineCheck,
			&i.DeadLineCheckSubSetting,
			&i.Detail,
			&i.LatestDateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserAccountById = `-- name: SelectUserAccountById :one
select
	id, user_setting_id, line_id, user_name, image_url, is_line_bot_follow
from
	user_accounts
where
	id = $1
`

func (q *Queries) SelectUserAccountById(ctx context.Context, id string) (UserAccount, error) {
	row := q.db.QueryRow(ctx, selectUserAccountById, id)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.UserSettingID,
		&i.LineID,
		&i.UserName,
		&i.ImageUrl,
		&i.IsLineBotFollow,
	)
	return i, err
}

const selectUserAccountByLineId = `-- name: SelectUserAccountByLineId :one
select
	id, user_setting_id, line_id, user_name, image_url, is_line_bot_follow
from
	user_accounts
where
	line_id = $1
`

func (q *Queries) SelectUserAccountByLineId(ctx context.Context, lineID string) (UserAccount, error) {
	row := q.db.QueryRow(ctx, selectUserAccountByLineId, lineID)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.UserSettingID,
		&i.LineID,
		&i.UserName,
		&i.ImageUrl,
		&i.IsLineBotFollow,
	)
	return i, err
}

const selectUserAccountByUserSettingId = `-- name: SelectUserAccountByUserSettingId :one
select
	id, user_setting_id, line_id, user_name, image_url, is_line_bot_follow
from
	user_accounts
where
	user_setting_id = $1
`

func (q *Queries) SelectUserAccountByUserSettingId(ctx context.Context, userSettingID string) (UserAccount, error) {
	row := q.db.QueryRow(ctx, selectUserAccountByUserSettingId, userSettingID)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.UserSettingID,
		&i.LineID,
		&i.UserName,
		&i.ImageUrl,
		&i.IsLineBotFollow,
	)
	return i, err
}
