// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	db_type "wasurena-task-api/db/type"
)

const createTaskCategory = `-- name: CreateTaskCategory :one
insert
	into
	task_category (
    id,
	name,
	owner_user_id,
	display_order
)
values (
    $1, 
    $2, 
    $3, 
    $4
) returning id, name, owner_user_id, display_order
`

type CreateTaskCategoryParams struct {
	ID           string
	Name         string
	OwnerUserID  string
	DisplayOrder *int32
}

func (q *Queries) CreateTaskCategory(ctx context.Context, arg CreateTaskCategoryParams) (TaskCategory, error) {
	row := q.db.QueryRow(ctx, createTaskCategory,
		arg.ID,
		arg.Name,
		arg.OwnerUserID,
		arg.DisplayOrder,
	)
	var i TaskCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerUserID,
		&i.DisplayOrder,
	)
	return i, err
}

const createTaskDefinition = `-- name: CreateTaskDefinition :one
insert
	into
	task_definition (
    id,
	title,
	owner_user_id,
	display_flag,
	notification_flag,
	dead_line_check,
	dead_line_check_sub_setting,
	category_id,
	detail
)
values (
    $1, 
    $2, 
    $3, 
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) returning id, title, owner_user_id, display_flag, notification_flag, category_id, dead_line_check, dead_line_check_sub_setting, detail
`

type CreateTaskDefinitionParams struct {
	ID                      string
	Title                   string
	OwnerUserID             string
	DisplayFlag             bool
	NotificationFlag        bool
	DeadLineCheck           *DeadLineCheckEnum
	DeadLineCheckSubSetting db_type.Jsonb
	CategoryID              *string
	Detail                  *string
}

func (q *Queries) CreateTaskDefinition(ctx context.Context, arg CreateTaskDefinitionParams) (TaskDefinition, error) {
	row := q.db.QueryRow(ctx, createTaskDefinition,
		arg.ID,
		arg.Title,
		arg.OwnerUserID,
		arg.DisplayFlag,
		arg.NotificationFlag,
		arg.DeadLineCheck,
		arg.DeadLineCheckSubSetting,
		arg.CategoryID,
		arg.Detail,
	)
	var i TaskDefinition
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.OwnerUserID,
		&i.DisplayFlag,
		&i.NotificationFlag,
		&i.CategoryID,
		&i.DeadLineCheck,
		&i.DeadLineCheckSubSetting,
		&i.Detail,
	)
	return i, err
}
