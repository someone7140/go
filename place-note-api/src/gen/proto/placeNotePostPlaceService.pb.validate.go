// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/placeNotePostPlaceService.proto

package placeNote

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddPostPlaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostPlaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostPlaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostPlaceRequestMultiError, or nil if none found.
func (m *AddPostPlaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostPlaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddPostPlaceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Address != nil {
		// no validation rules for Address
	}

	if m.LatLon != nil {

		if all {
			switch v := interface{}(m.GetLatLon()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddPostPlaceRequestValidationError{
						field:  "LatLon",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddPostPlaceRequestValidationError{
						field:  "LatLon",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLatLon()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddPostPlaceRequestValidationError{
					field:  "LatLon",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PrefectureCode != nil {
		// no validation rules for PrefectureCode
	}

	if m.Detail != nil {
		// no validation rules for Detail
	}

	if len(errors) > 0 {
		return AddPostPlaceRequestMultiError(errors)
	}

	return nil
}

// AddPostPlaceRequestMultiError is an error wrapping multiple validation
// errors returned by AddPostPlaceRequest.ValidateAll() if the designated
// constraints aren't met.
type AddPostPlaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostPlaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostPlaceRequestMultiError) AllErrors() []error { return m }

// AddPostPlaceRequestValidationError is the validation error returned by
// AddPostPlaceRequest.Validate if the designated constraints aren't met.
type AddPostPlaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostPlaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostPlaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostPlaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostPlaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostPlaceRequestValidationError) ErrorName() string {
	return "AddPostPlaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostPlaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostPlaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostPlaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostPlaceRequestValidationError{}

// Validate checks the field values on UpdatePostPlaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostPlaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostPlaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePostPlaceRequestMultiError, or nil if none found.
func (m *UpdatePostPlaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostPlaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdatePostPlaceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdatePostPlaceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Address != nil {
		// no validation rules for Address
	}

	if m.LatLon != nil {

		if all {
			switch v := interface{}(m.GetLatLon()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePostPlaceRequestValidationError{
						field:  "LatLon",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePostPlaceRequestValidationError{
						field:  "LatLon",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLatLon()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePostPlaceRequestValidationError{
					field:  "LatLon",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PrefectureCode != nil {
		// no validation rules for PrefectureCode
	}

	if m.Detail != nil {
		// no validation rules for Detail
	}

	if len(errors) > 0 {
		return UpdatePostPlaceRequestMultiError(errors)
	}

	return nil
}

// UpdatePostPlaceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePostPlaceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePostPlaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostPlaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostPlaceRequestMultiError) AllErrors() []error { return m }

// UpdatePostPlaceRequestValidationError is the validation error returned by
// UpdatePostPlaceRequest.Validate if the designated constraints aren't met.
type UpdatePostPlaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostPlaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostPlaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostPlaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostPlaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostPlaceRequestValidationError) ErrorName() string {
	return "UpdatePostPlaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostPlaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostPlaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostPlaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostPlaceRequestValidationError{}

// Validate checks the field values on DeletePostPlaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePostPlaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostPlaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostPlaceRequestMultiError, or nil if none found.
func (m *DeletePostPlaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostPlaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeletePostPlaceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePostPlaceRequestMultiError(errors)
	}

	return nil
}

// DeletePostPlaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePostPlaceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePostPlaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostPlaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostPlaceRequestMultiError) AllErrors() []error { return m }

// DeletePostPlaceRequestValidationError is the validation error returned by
// DeletePostPlaceRequest.Validate if the designated constraints aren't met.
type DeletePostPlaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostPlaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostPlaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostPlaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostPlaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostPlaceRequestValidationError) ErrorName() string {
	return "DeletePostPlaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostPlaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostPlaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostPlaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostPlaceRequestValidationError{}

// Validate checks the field values on GetPostPlaceByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostPlaceByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostPlaceByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostPlaceByIdRequestMultiError, or nil if none found.
func (m *GetPostPlaceByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostPlaceByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetPostPlaceByIdRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPostPlaceByIdRequestMultiError(errors)
	}

	return nil
}

// GetPostPlaceByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetPostPlaceByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPostPlaceByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostPlaceByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostPlaceByIdRequestMultiError) AllErrors() []error { return m }

// GetPostPlaceByIdRequestValidationError is the validation error returned by
// GetPostPlaceByIdRequest.Validate if the designated constraints aren't met.
type GetPostPlaceByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostPlaceByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostPlaceByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostPlaceByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostPlaceByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostPlaceByIdRequestValidationError) ErrorName() string {
	return "GetPostPlaceByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostPlaceByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostPlaceByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostPlaceByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostPlaceByIdRequestValidationError{}

// Validate checks the field values on PostPlaceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostPlaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostPlaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostPlaceResponseMultiError, or nil if none found.
func (m *PostPlaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostPlaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if m.Address != nil {
		// no validation rules for Address
	}

	if m.LatLon != nil {

		if all {
			switch v := interface{}(m.GetLatLon()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostPlaceResponseValidationError{
						field:  "LatLon",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostPlaceResponseValidationError{
						field:  "LatLon",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLatLon()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostPlaceResponseValidationError{
					field:  "LatLon",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PrefectureCode != nil {
		// no validation rules for PrefectureCode
	}

	if m.Detail != nil {
		// no validation rules for Detail
	}

	if len(errors) > 0 {
		return PostPlaceResponseMultiError(errors)
	}

	return nil
}

// PostPlaceResponseMultiError is an error wrapping multiple validation errors
// returned by PostPlaceResponse.ValidateAll() if the designated constraints
// aren't met.
type PostPlaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostPlaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostPlaceResponseMultiError) AllErrors() []error { return m }

// PostPlaceResponseValidationError is the validation error returned by
// PostPlaceResponse.Validate if the designated constraints aren't met.
type PostPlaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostPlaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostPlaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostPlaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostPlaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostPlaceResponseValidationError) ErrorName() string {
	return "PostPlaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostPlaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostPlaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostPlaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostPlaceResponseValidationError{}

// Validate checks the field values on GetPostPlaceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostPlaceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostPlaceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostPlaceListResponseMultiError, or nil if none found.
func (m *GetPostPlaceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostPlaceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlaceList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPostPlaceListResponseValidationError{
						field:  fmt.Sprintf("PlaceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPostPlaceListResponseValidationError{
						field:  fmt.Sprintf("PlaceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPostPlaceListResponseValidationError{
					field:  fmt.Sprintf("PlaceList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPostPlaceListResponseMultiError(errors)
	}

	return nil
}

// GetPostPlaceListResponseMultiError is an error wrapping multiple validation
// errors returned by GetPostPlaceListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPostPlaceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostPlaceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostPlaceListResponseMultiError) AllErrors() []error { return m }

// GetPostPlaceListResponseValidationError is the validation error returned by
// GetPostPlaceListResponse.Validate if the designated constraints aren't met.
type GetPostPlaceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostPlaceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostPlaceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostPlaceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostPlaceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostPlaceListResponseValidationError) ErrorName() string {
	return "GetPostPlaceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostPlaceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostPlaceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostPlaceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostPlaceListResponseValidationError{}
