// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/placeNote.proto

package placeNoteconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	proto "placeNote/src/gen/proto"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserAccountServiceName is the fully-qualified name of the UserAccountService service.
	UserAccountServiceName = "placeNote.UserAccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserAccountServiceAuthGoogleAccountProcedure is the fully-qualified name of the
	// UserAccountService's AuthGoogleAccount RPC.
	UserAccountServiceAuthGoogleAccountProcedure = "/placeNote.UserAccountService/AuthGoogleAccount"
	// UserAccountServiceRegisterUserAccountProcedure is the fully-qualified name of the
	// UserAccountService's RegisterUserAccount RPC.
	UserAccountServiceRegisterUserAccountProcedure = "/placeNote.UserAccountService/RegisterUserAccount"
	// UserAccountServiceGetUserAccountFromAuthTokenProcedure is the fully-qualified name of the
	// UserAccountService's GetUserAccountFromAuthToken RPC.
	UserAccountServiceGetUserAccountFromAuthTokenProcedure = "/placeNote.UserAccountService/GetUserAccountFromAuthToken"
	// UserAccountServiceLoginByGoogleProcedure is the fully-qualified name of the UserAccountService's
	// LoginByGoogle RPC.
	UserAccountServiceLoginByGoogleProcedure = "/placeNote.UserAccountService/LoginByGoogle"
)

// UserAccountServiceClient is a client for the placeNote.UserAccountService service.
type UserAccountServiceClient interface {
	AuthGoogleAccount(context.Context, *connect_go.Request[proto.AuthGoogleAccountRequest]) (*connect_go.Response[proto.AuthGoogleAccountResponse], error)
	RegisterUserAccount(context.Context, *connect_go.Request[proto.RegisterUserAccountRequest]) (*connect_go.Response[proto.UserAccountResponse], error)
	GetUserAccountFromAuthToken(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.UserAccountResponse], error)
	LoginByGoogle(context.Context, *connect_go.Request[proto.AuthGoogleAccountRequest]) (*connect_go.Response[proto.UserAccountResponse], error)
}

// NewUserAccountServiceClient constructs a client for the placeNote.UserAccountService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserAccountServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserAccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userAccountServiceClient{
		authGoogleAccount: connect_go.NewClient[proto.AuthGoogleAccountRequest, proto.AuthGoogleAccountResponse](
			httpClient,
			baseURL+UserAccountServiceAuthGoogleAccountProcedure,
			opts...,
		),
		registerUserAccount: connect_go.NewClient[proto.RegisterUserAccountRequest, proto.UserAccountResponse](
			httpClient,
			baseURL+UserAccountServiceRegisterUserAccountProcedure,
			opts...,
		),
		getUserAccountFromAuthToken: connect_go.NewClient[emptypb.Empty, proto.UserAccountResponse](
			httpClient,
			baseURL+UserAccountServiceGetUserAccountFromAuthTokenProcedure,
			opts...,
		),
		loginByGoogle: connect_go.NewClient[proto.AuthGoogleAccountRequest, proto.UserAccountResponse](
			httpClient,
			baseURL+UserAccountServiceLoginByGoogleProcedure,
			opts...,
		),
	}
}

// userAccountServiceClient implements UserAccountServiceClient.
type userAccountServiceClient struct {
	authGoogleAccount           *connect_go.Client[proto.AuthGoogleAccountRequest, proto.AuthGoogleAccountResponse]
	registerUserAccount         *connect_go.Client[proto.RegisterUserAccountRequest, proto.UserAccountResponse]
	getUserAccountFromAuthToken *connect_go.Client[emptypb.Empty, proto.UserAccountResponse]
	loginByGoogle               *connect_go.Client[proto.AuthGoogleAccountRequest, proto.UserAccountResponse]
}

// AuthGoogleAccount calls placeNote.UserAccountService.AuthGoogleAccount.
func (c *userAccountServiceClient) AuthGoogleAccount(ctx context.Context, req *connect_go.Request[proto.AuthGoogleAccountRequest]) (*connect_go.Response[proto.AuthGoogleAccountResponse], error) {
	return c.authGoogleAccount.CallUnary(ctx, req)
}

// RegisterUserAccount calls placeNote.UserAccountService.RegisterUserAccount.
func (c *userAccountServiceClient) RegisterUserAccount(ctx context.Context, req *connect_go.Request[proto.RegisterUserAccountRequest]) (*connect_go.Response[proto.UserAccountResponse], error) {
	return c.registerUserAccount.CallUnary(ctx, req)
}

// GetUserAccountFromAuthToken calls placeNote.UserAccountService.GetUserAccountFromAuthToken.
func (c *userAccountServiceClient) GetUserAccountFromAuthToken(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.UserAccountResponse], error) {
	return c.getUserAccountFromAuthToken.CallUnary(ctx, req)
}

// LoginByGoogle calls placeNote.UserAccountService.LoginByGoogle.
func (c *userAccountServiceClient) LoginByGoogle(ctx context.Context, req *connect_go.Request[proto.AuthGoogleAccountRequest]) (*connect_go.Response[proto.UserAccountResponse], error) {
	return c.loginByGoogle.CallUnary(ctx, req)
}

// UserAccountServiceHandler is an implementation of the placeNote.UserAccountService service.
type UserAccountServiceHandler interface {
	AuthGoogleAccount(context.Context, *connect_go.Request[proto.AuthGoogleAccountRequest]) (*connect_go.Response[proto.AuthGoogleAccountResponse], error)
	RegisterUserAccount(context.Context, *connect_go.Request[proto.RegisterUserAccountRequest]) (*connect_go.Response[proto.UserAccountResponse], error)
	GetUserAccountFromAuthToken(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.UserAccountResponse], error)
	LoginByGoogle(context.Context, *connect_go.Request[proto.AuthGoogleAccountRequest]) (*connect_go.Response[proto.UserAccountResponse], error)
}

// NewUserAccountServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserAccountServiceHandler(svc UserAccountServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	userAccountServiceAuthGoogleAccountHandler := connect_go.NewUnaryHandler(
		UserAccountServiceAuthGoogleAccountProcedure,
		svc.AuthGoogleAccount,
		opts...,
	)
	userAccountServiceRegisterUserAccountHandler := connect_go.NewUnaryHandler(
		UserAccountServiceRegisterUserAccountProcedure,
		svc.RegisterUserAccount,
		opts...,
	)
	userAccountServiceGetUserAccountFromAuthTokenHandler := connect_go.NewUnaryHandler(
		UserAccountServiceGetUserAccountFromAuthTokenProcedure,
		svc.GetUserAccountFromAuthToken,
		opts...,
	)
	userAccountServiceLoginByGoogleHandler := connect_go.NewUnaryHandler(
		UserAccountServiceLoginByGoogleProcedure,
		svc.LoginByGoogle,
		opts...,
	)
	return "/placeNote.UserAccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserAccountServiceAuthGoogleAccountProcedure:
			userAccountServiceAuthGoogleAccountHandler.ServeHTTP(w, r)
		case UserAccountServiceRegisterUserAccountProcedure:
			userAccountServiceRegisterUserAccountHandler.ServeHTTP(w, r)
		case UserAccountServiceGetUserAccountFromAuthTokenProcedure:
			userAccountServiceGetUserAccountFromAuthTokenHandler.ServeHTTP(w, r)
		case UserAccountServiceLoginByGoogleProcedure:
			userAccountServiceLoginByGoogleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserAccountServiceHandler struct{}

func (UnimplementedUserAccountServiceHandler) AuthGoogleAccount(context.Context, *connect_go.Request[proto.AuthGoogleAccountRequest]) (*connect_go.Response[proto.AuthGoogleAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("placeNote.UserAccountService.AuthGoogleAccount is not implemented"))
}

func (UnimplementedUserAccountServiceHandler) RegisterUserAccount(context.Context, *connect_go.Request[proto.RegisterUserAccountRequest]) (*connect_go.Response[proto.UserAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("placeNote.UserAccountService.RegisterUserAccount is not implemented"))
}

func (UnimplementedUserAccountServiceHandler) GetUserAccountFromAuthToken(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.UserAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("placeNote.UserAccountService.GetUserAccountFromAuthToken is not implemented"))
}

func (UnimplementedUserAccountServiceHandler) LoginByGoogle(context.Context, *connect_go.Request[proto.AuthGoogleAccountRequest]) (*connect_go.Response[proto.UserAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("placeNote.UserAccountService.LoginByGoogle is not implemented"))
}
