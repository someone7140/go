// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/placeNotePostCategoryService.proto

package placeNoteconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	proto "placeNote/src/gen/proto"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PostCategoryServiceName is the fully-qualified name of the PostCategoryService service.
	PostCategoryServiceName = "placeNote.PostCategoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PostCategoryServiceAddPostCategoryProcedure is the fully-qualified name of the
	// PostCategoryService's AddPostCategory RPC.
	PostCategoryServiceAddPostCategoryProcedure = "/placeNote.PostCategoryService/AddPostCategory"
	// PostCategoryServiceUpdatePostCategoryProcedure is the fully-qualified name of the
	// PostCategoryService's UpdatePostCategory RPC.
	PostCategoryServiceUpdatePostCategoryProcedure = "/placeNote.PostCategoryService/UpdatePostCategory"
	// PostCategoryServiceDeletePostCategoryProcedure is the fully-qualified name of the
	// PostCategoryService's DeletePostCategory RPC.
	PostCategoryServiceDeletePostCategoryProcedure = "/placeNote.PostCategoryService/DeletePostCategory"
	// PostCategoryServiceGetPostCategoryListProcedure is the fully-qualified name of the
	// PostCategoryService's GetPostCategoryList RPC.
	PostCategoryServiceGetPostCategoryListProcedure = "/placeNote.PostCategoryService/GetPostCategoryList"
)

// PostCategoryServiceClient is a client for the placeNote.PostCategoryService service.
type PostCategoryServiceClient interface {
	AddPostCategory(context.Context, *connect_go.Request[proto.AddPostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	UpdatePostCategory(context.Context, *connect_go.Request[proto.UpdatePostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeletePostCategory(context.Context, *connect_go.Request[proto.DeletePostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetPostCategoryList(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.GetPostCategoryListResponse], error)
}

// NewPostCategoryServiceClient constructs a client for the placeNote.PostCategoryService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostCategoryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PostCategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &postCategoryServiceClient{
		addPostCategory: connect_go.NewClient[proto.AddPostCategoryRequest, emptypb.Empty](
			httpClient,
			baseURL+PostCategoryServiceAddPostCategoryProcedure,
			opts...,
		),
		updatePostCategory: connect_go.NewClient[proto.UpdatePostCategoryRequest, emptypb.Empty](
			httpClient,
			baseURL+PostCategoryServiceUpdatePostCategoryProcedure,
			opts...,
		),
		deletePostCategory: connect_go.NewClient[proto.DeletePostCategoryRequest, emptypb.Empty](
			httpClient,
			baseURL+PostCategoryServiceDeletePostCategoryProcedure,
			opts...,
		),
		getPostCategoryList: connect_go.NewClient[emptypb.Empty, proto.GetPostCategoryListResponse](
			httpClient,
			baseURL+PostCategoryServiceGetPostCategoryListProcedure,
			opts...,
		),
	}
}

// postCategoryServiceClient implements PostCategoryServiceClient.
type postCategoryServiceClient struct {
	addPostCategory     *connect_go.Client[proto.AddPostCategoryRequest, emptypb.Empty]
	updatePostCategory  *connect_go.Client[proto.UpdatePostCategoryRequest, emptypb.Empty]
	deletePostCategory  *connect_go.Client[proto.DeletePostCategoryRequest, emptypb.Empty]
	getPostCategoryList *connect_go.Client[emptypb.Empty, proto.GetPostCategoryListResponse]
}

// AddPostCategory calls placeNote.PostCategoryService.AddPostCategory.
func (c *postCategoryServiceClient) AddPostCategory(ctx context.Context, req *connect_go.Request[proto.AddPostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.addPostCategory.CallUnary(ctx, req)
}

// UpdatePostCategory calls placeNote.PostCategoryService.UpdatePostCategory.
func (c *postCategoryServiceClient) UpdatePostCategory(ctx context.Context, req *connect_go.Request[proto.UpdatePostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updatePostCategory.CallUnary(ctx, req)
}

// DeletePostCategory calls placeNote.PostCategoryService.DeletePostCategory.
func (c *postCategoryServiceClient) DeletePostCategory(ctx context.Context, req *connect_go.Request[proto.DeletePostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deletePostCategory.CallUnary(ctx, req)
}

// GetPostCategoryList calls placeNote.PostCategoryService.GetPostCategoryList.
func (c *postCategoryServiceClient) GetPostCategoryList(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.GetPostCategoryListResponse], error) {
	return c.getPostCategoryList.CallUnary(ctx, req)
}

// PostCategoryServiceHandler is an implementation of the placeNote.PostCategoryService service.
type PostCategoryServiceHandler interface {
	AddPostCategory(context.Context, *connect_go.Request[proto.AddPostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	UpdatePostCategory(context.Context, *connect_go.Request[proto.UpdatePostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeletePostCategory(context.Context, *connect_go.Request[proto.DeletePostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetPostCategoryList(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.GetPostCategoryListResponse], error)
}

// NewPostCategoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostCategoryServiceHandler(svc PostCategoryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	postCategoryServiceAddPostCategoryHandler := connect_go.NewUnaryHandler(
		PostCategoryServiceAddPostCategoryProcedure,
		svc.AddPostCategory,
		opts...,
	)
	postCategoryServiceUpdatePostCategoryHandler := connect_go.NewUnaryHandler(
		PostCategoryServiceUpdatePostCategoryProcedure,
		svc.UpdatePostCategory,
		opts...,
	)
	postCategoryServiceDeletePostCategoryHandler := connect_go.NewUnaryHandler(
		PostCategoryServiceDeletePostCategoryProcedure,
		svc.DeletePostCategory,
		opts...,
	)
	postCategoryServiceGetPostCategoryListHandler := connect_go.NewUnaryHandler(
		PostCategoryServiceGetPostCategoryListProcedure,
		svc.GetPostCategoryList,
		opts...,
	)
	return "/placeNote.PostCategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PostCategoryServiceAddPostCategoryProcedure:
			postCategoryServiceAddPostCategoryHandler.ServeHTTP(w, r)
		case PostCategoryServiceUpdatePostCategoryProcedure:
			postCategoryServiceUpdatePostCategoryHandler.ServeHTTP(w, r)
		case PostCategoryServiceDeletePostCategoryProcedure:
			postCategoryServiceDeletePostCategoryHandler.ServeHTTP(w, r)
		case PostCategoryServiceGetPostCategoryListProcedure:
			postCategoryServiceGetPostCategoryListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPostCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostCategoryServiceHandler struct{}

func (UnimplementedPostCategoryServiceHandler) AddPostCategory(context.Context, *connect_go.Request[proto.AddPostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("placeNote.PostCategoryService.AddPostCategory is not implemented"))
}

func (UnimplementedPostCategoryServiceHandler) UpdatePostCategory(context.Context, *connect_go.Request[proto.UpdatePostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("placeNote.PostCategoryService.UpdatePostCategory is not implemented"))
}

func (UnimplementedPostCategoryServiceHandler) DeletePostCategory(context.Context, *connect_go.Request[proto.DeletePostCategoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("placeNote.PostCategoryService.DeletePostCategory is not implemented"))
}

func (UnimplementedPostCategoryServiceHandler) GetPostCategoryList(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.GetPostCategoryListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("placeNote.PostCategoryService.GetPostCategoryList is not implemented"))
}
