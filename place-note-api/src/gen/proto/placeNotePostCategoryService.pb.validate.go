// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/placeNotePostCategoryService.proto

package placeNote

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddPostCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostCategoryRequestMultiError, or nil if none found.
func (m *AddPostCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddPostCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Memo != nil {
		// no validation rules for Memo
	}

	if m.DisplayOrder != nil {
		// no validation rules for DisplayOrder
	}

	if len(errors) > 0 {
		return AddPostCategoryRequestMultiError(errors)
	}

	return nil
}

// AddPostCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by AddPostCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type AddPostCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostCategoryRequestMultiError) AllErrors() []error { return m }

// AddPostCategoryRequestValidationError is the validation error returned by
// AddPostCategoryRequest.Validate if the designated constraints aren't met.
type AddPostCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostCategoryRequestValidationError) ErrorName() string {
	return "AddPostCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostCategoryRequestValidationError{}

// Validate checks the field values on UpdatePostCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePostCategoryRequestMultiError, or nil if none found.
func (m *UpdatePostCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdatePostCategoryRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdatePostCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Memo != nil {
		// no validation rules for Memo
	}

	if m.DisplayOrder != nil {
		// no validation rules for DisplayOrder
	}

	if len(errors) > 0 {
		return UpdatePostCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdatePostCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePostCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdatePostCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostCategoryRequestMultiError) AllErrors() []error { return m }

// UpdatePostCategoryRequestValidationError is the validation error returned by
// UpdatePostCategoryRequest.Validate if the designated constraints aren't met.
type UpdatePostCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostCategoryRequestValidationError) ErrorName() string {
	return "UpdatePostCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostCategoryRequestValidationError{}

// Validate checks the field values on DeletePostCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePostCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostCategoryRequestMultiError, or nil if none found.
func (m *DeletePostCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeletePostCategoryRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePostCategoryRequestMultiError(errors)
	}

	return nil
}

// DeletePostCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePostCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type DeletePostCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostCategoryRequestMultiError) AllErrors() []error { return m }

// DeletePostCategoryRequestValidationError is the validation error returned by
// DeletePostCategoryRequest.Validate if the designated constraints aren't met.
type DeletePostCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostCategoryRequestValidationError) ErrorName() string {
	return "DeletePostCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostCategoryRequestValidationError{}

// Validate checks the field values on PostCategory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostCategoryMultiError, or
// nil if none found.
func (m *PostCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *PostCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Memo != nil {
		// no validation rules for Memo
	}

	if m.DisplayOrder != nil {
		// no validation rules for DisplayOrder
	}

	if len(errors) > 0 {
		return PostCategoryMultiError(errors)
	}

	return nil
}

// PostCategoryMultiError is an error wrapping multiple validation errors
// returned by PostCategory.ValidateAll() if the designated constraints aren't met.
type PostCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostCategoryMultiError) AllErrors() []error { return m }

// PostCategoryValidationError is the validation error returned by
// PostCategory.Validate if the designated constraints aren't met.
type PostCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostCategoryValidationError) ErrorName() string { return "PostCategoryValidationError" }

// Error satisfies the builtin error interface
func (e PostCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostCategoryValidationError{}

// Validate checks the field values on GetPostCategoryListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostCategoryListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostCategoryListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostCategoryListResponseMultiError, or nil if none found.
func (m *GetPostCategoryListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostCategoryListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategoryList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPostCategoryListResponseValidationError{
						field:  fmt.Sprintf("CategoryList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPostCategoryListResponseValidationError{
						field:  fmt.Sprintf("CategoryList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPostCategoryListResponseValidationError{
					field:  fmt.Sprintf("CategoryList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPostCategoryListResponseMultiError(errors)
	}

	return nil
}

// GetPostCategoryListResponseMultiError is an error wrapping multiple
// validation errors returned by GetPostCategoryListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPostCategoryListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostCategoryListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostCategoryListResponseMultiError) AllErrors() []error { return m }

// GetPostCategoryListResponseValidationError is the validation error returned
// by GetPostCategoryListResponse.Validate if the designated constraints
// aren't met.
type GetPostCategoryListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostCategoryListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostCategoryListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostCategoryListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostCategoryListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostCategoryListResponseValidationError) ErrorName() string {
	return "GetPostCategoryListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostCategoryListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostCategoryListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostCategoryListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostCategoryListResponseValidationError{}
